# -*- coding: utf-8 -*-
"""Backward.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wqBuYNkWF9uGspSqUU-NTuFVILGabQlE
"""

import matplotlib.pyplot as plt
import math as m
import operator as op
from functools import reduce
import scipy.stats as stats
from statistics import mean

def forward_diff_table(arr, ans, n):
  temp = []

  for i in range(1, n):
    temp.append(arr[i] - arr[i-1])

  ans.append(temp)
  ans

  while len(ans[-1]) > 1:
    temp = []

    for i in range(1, len(ans[-1])):
      temp.append(ans[-1][i] - ans[-1][i-1])

    ans.append(temp)

  return ans

def ncr(n, r, k):

  if k == 1:
    val = 1

    for i in range(r):
      val *= (n - i)

    if r == 1:
      return val

    a = val / m.factorial(r)

  else:
    val = 1

    for i in range(r):
      val *= (n + i)

    if r == 1:
      return val

    a = val / m.factorial(r)

  return a

def backward_interpolation(y_n, n, ans, v):
  val = y_n

  for i in range(n):
    val += ncr(v, i+1, 2) * ans[i][-1]

  return val

years = [i for i in range(1985, 1996)]
years_1 = [i for i in range(1985, 1994)]
expenditure = [731, 782, 833, 886, 956, 1049, 1159, 1267, 1367, 1436, 1505]
expenditure_1 = [731, 782, 833, 886, 956, 1049, 1159, 1267, 1367]

n = len(years)
diff = forward_diff_table(expenditure, [], n)

n_1 = len(years_1)
diff_1 = forward_diff_table(expenditure_1, [], n_1)

diff_1

x_0 = years_1[0]
x_n = years_1[-1]
h = 1

vals_to_be_predicted = [1994, 1995]
pred_expenditure = []

for i in vals_to_be_predicted:
  v = (i - x_n) / h
  pred_expenditure.append(backward_interpolation(expenditure_1[-1], len(diff_1), diff_1, v))

pred_expenditure

plt.scatter(vals_to_be_predicted, expenditure[-2:])
plt.scatter(vals_to_be_predicted, pred_expenditure)